package com.fy.tool.toolmaker.action;

import com.fy.basejar.tool.ActionToolBase;
import com.fy.tool.toolmaker.core.DbColumn;
import com.fy.tool.toolmaker.core.DbTable;
import com.fy.tool.toolmaker.core.ToolConfiguration;
import com.fy.tool.toolmaker.core.ToolMakerUtil;
import com.fy.tool.toolmaker.entity.ToolMakerEntity;
import com.fy.tool.toolmaker.service.IToolMakerService;
import com.fy.tool.toolmaker.service.impl.ToolMakerServiceImpl;
import com.fy.tool.toolmaker.dao.IToolMakerDao;
import com.fy.tool.toolmaker.dao.impl.ToolMakerDaoImpl;
import com.fy.tool.toolmaker.util.PinyinUtil;
import com.fy.tool.toolmaker.util.ZipUtil;
import com.fy.toolhelper.util.FormatUtils;
import com.fy.toolhelper.util.RequestUtils;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLDecoder;
import java.util.*;
import java.util.stream.Collectors;

public class ToolMaker extends ActionToolBase {

    private String tempDir = System.getProperty("java.io.tmpdir");

    @Action
    public String hello(HttpServletRequest request) {
        return RequestUtils.getStringParameter(request, "arg1");
    }

    @Action
    public Map<String, Object> getTables(HttpServletRequest request) {
        Map<String, Object> result = new HashMap<String, Object>();
        String databaseName = RequestUtils.getStringParameter(request, "databaseName");
        IToolMakerService toolMakerService = null;
        try {
            toolMakerService = getBean(IToolMakerService.class);
            List<Map<String, Object>> tables = toolMakerService.getTables(databaseName);
            result.put("data", tables);
            result.put("code", 200);
        } catch (Exception e) {
            result.put("message", e.getMessage());
            result.put("code", 500);
            e.printStackTrace();
        }
        return result;
    }

    @Action
    public Map<String, Object> getTableFields(HttpServletRequest request) {
        Map<String, Object> result = new HashMap<String, Object>();
        String tableName = RequestUtils.getStringParameter(request, "tableName");
        String databaseName = RequestUtils.getStringParameter(request, "databaseName");
        IToolMakerService toolMakerService = null;
        try {
            toolMakerService = getBean(IToolMakerService.class);
            List<Map<String, Object>> tableFields = toolMakerService.getTableFields(tableName, databaseName);
            result.put("data", tableFields);
            result.put("code", 200);
        } catch (Exception e) {
            result.put("message", e.getMessage());
            result.put("code", 500);
            e.printStackTrace();
        }
        return result;
    }

    @Action
    public Map<String, Object> showDataBases(HttpServletRequest request){
        Map<String, Object> result = new HashMap<String, Object>();
        String account = RequestUtils.getStringParameter(request, "account");
        String password = RequestUtils.getStringParameter(request, "password");
        IToolMakerService makerService = null;
        try {
            makerService = getBean(IToolMakerService.class);
            List<Map<String,Object>> data = makerService.showDataBases();
            result.put("code", 200);
            result.put("data", data);
            return result;
        } catch (Exception e) {
            result.put("code", 500);
            result.put("message", e.getMessage());
            return result;
        }
    }

    @Action
    public Map<String, Object> upload(HttpServletRequest request) {

        HashMap<String, Object> result = new HashMap<>();
        HashMap<String, Object> data = new HashMap<>();

        try {
            FileItemFactory factory = new DiskFileItemFactory();
            ServletFileUpload upload = new ServletFileUpload(factory);
            List<FileItem> items = upload.parseRequest(request);
            Iterator<FileItem> itr = items.iterator();

            while (itr.hasNext()) {
                FileItem item = itr.next();
                // 文件类型的表单
                if (!item.isFormField()) {
                    String fileName = item.getName();
                    if (fileName != null) {
                        if (!fileName.endsWith(".csv")) {
                            result.put("code", 201);
                            data.put("msg", "文件上传的类型错误");
                            result.put("data", data);
                            break;
                        }
                        InputStream inputStream = item.getInputStream();
                        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,"utf-8"));
//                        reader.skip(2); // 前两个字节乱码，所以跳过
                        ArrayList<List> rows = new ArrayList<>();
                        // 读取每一行
                        String line;
                        boolean readHeader = false;
                        while ((line = reader.readLine()) != null) {
                            String[] split = line.split(",");
                            List<String> row = Arrays.stream(split).collect(Collectors.toList());
                            if (!readHeader) {
                                readHeader = true;
                                data.put("fields", row);
                            } else {
                                rows.add(row);
                            }
                        }
                        data.put("rows", rows);
                        result.put("code", 200);
                        result.put("data", data);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

//    @Action
//    public Map<String, Object> preview(HttpServletRequest request) {
//        String toolName = RequestUtils.getStringParameter(request, "toolName");
//        String toolNamePinYin = PinyinUtil.getPingYin(toolName);
//        String outputPath = tempDir + File.separator + "toolmaker_" + toolNamePinYin;
//        String tempPath = request.getServletContext().getRealPath("temp");
//        String resource = outputPath + File.separator + "WebRoot" + File.separator + "resource";
//        moveFiles(resource, tempPath + File.separator + toolNamePinYin);
//        // 移动好文件后，再把main.jsp文件也移动过来，并更改名字为main.html
//        HashMap<String, Object> result = new HashMap<>();
//        result.put("url", "http://localhost:8080/temp/"+tempPath + File.separator + toolNamePinYin+ File.separator + )
//        return ;
//    }

    /**
     * 复制文件夹及文件
     *  1.如果是源文件路径一个文件夹，则在目的路径下创建一个相同的文件夹，并遍历该文件夹下的所有文件
     *      - 由遍历得到的每一个文件，再调用本方法
     *  2.如果是一个文件，直接复制
     * @param originPath
     * @param destinationPath
     * @return
     */
//    private static void moveFiles(String originPath, String destinationPath) {
//        File resourceFiles = new File(originPath);
//        if(resourceFiles.isDirectory()) {
//            // 如果 resourceFiles 是一个目录，则在目的路径下也创建一个相同的目录
//            File createDir = new File(destinationPath, resourceFiles.getName());
//            if(!createDir.exists()) {
//                createDir.mkdir();
//            }
//            File[] files = resourceFiles.listFiles();
//            for (File file:
//                    files) {
//                // 在 tempPath目录下创建文件
//                String newDesPath = destinationPath + File.separator + file.getName();
//                moveFiles(file.getAbsolutePath(), newDesPath);
//            }
//        } else { // 说明是一个文件
//            try(FileInputStream fis = new FileInputStream(resourceFiles);
//                FileOutputStream fos = new FileOutputStream(destinationPath)
//            ) {
//                int copy = IOUtils.copy(fis, fos);
//                System.out.print("源文件：" + originPath + "，转移到===》");
//                System.out.println("目的路径下：" + destinationPath);
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }
//    }

    @Action
    public Map<String, Object> makeTool(HttpServletRequest request) throws UnsupportedEncodingException {
        HashMap<String, Object> result = new HashMap<>();
        HashMap<String, Object> data = new HashMap<>();
        Boolean remoteCall = RequestUtils.getBooleanParameter(request, "remoteCall");
        List<String> fieldNames;
        if (remoteCall != null && remoteCall) {
            String s = URLDecoder.decode(RequestUtils.getStringParameter(request, "fieldNames"), "utf-8");
            if (s != null && !s.trim().isEmpty()) {
                fieldNames = FormatUtils.arrayStr2List(s, false);
            } else {
                fieldNames = Collections.emptyList();
            }
        } else {
            fieldNames = RequestUtils.getJsonArrayParameter(request, "fieldNames");
        }
        List<String> fieldTypes = RequestUtils.getJsonArrayParameter(request, "fieldTypes");
        List<String> searchFieldsIndex = RequestUtils.getJsonArrayParameter(request, "searchFields");

        String toolNameChinese = RequestUtils.getStringParameter(request, "toolName");
        String toolDescription = RequestUtils.getStringParameter(request, "toolDescription");

        // 获取公式字段
        List<String> formulaNames = RequestUtils.getJsonArrayParameter(request, "formulaNames");
        List<String> formulas = RequestUtils.getJsonArrayParameter(request, "formulas");

        // 汉字转化为拼音
        String toolName = PinyinUtil.getPingYin(toolNameChinese);
        data.put("toolName", toolName);

        // 是否是生成视图工具
        Boolean nViewTool = RequestUtils.getBooleanParameter(request, "nViewTool");
        if(nViewTool == null) {
            nViewTool = true; // 表示不是视图工具
        }
        // 获取视图来源id
        Integer parentId = RequestUtils.getIntegerParameter(request, "parentToolId");
        String parentToolName = RequestUtils.getStringParameter(request, "parentToolName");

        String tableName = toolName;
        if(parentId != null) {
            tableName = parentToolName;
        }
        // TODO sql 注入问题
        try {
            DbTable dbTable = generateTables(tableName, fieldNames, fieldTypes);
            List<DbColumn> columns = dbTable.getColumns();
            // 加入公式字段
            for (int i = 0; i < formulas.size(); i++) {
                String formulaName = PinyinUtil.getPingYin(formulaNames.get(i));
                DbColumn dbColumn = new DbColumn();
                dbColumn.setName(formulaName); // a1+a2
                dbColumn.setType("varchar(255)");
                dbColumn.setFormulaName(formulaNames.get(i));
                dbColumn.setComment(formulas.get(i)); // aaa
                dbColumn.setChangedName(ToolMakerUtil.underLineToCamelCase(formulaName)); // aaa
                columns.add(dbColumn);
            }
            dbTable.setColumns(columns);
            // 生成工具
            ToolConfiguration config = new ToolConfiguration();
            config.setToolName(toolNameChinese);
            config.setToolDescription(toolDescription);
            config.setTable(dbTable);
            config.setClassName("TM_" + toolName);
            config.setPackageName("com.wetoband.tool.toolmaker_" + toolName);
            config.setNViewTool(nViewTool);

            if (searchFieldsIndex != null && !searchFieldsIndex.isEmpty()) {
                List<String> searchFields = new ArrayList<>(searchFieldsIndex.size());
                searchFieldsIndex.forEach(field -> {
                    searchFields.add("column" + field);
                });

                config.setSearchFields(searchFields);
            }

            com.fy.tool.toolmaker.core.ToolMaker maker = new com.fy.tool.toolmaker.core.ToolMaker();
            String outputPath = tempDir + File.separator + "toolmaker_" + toolName;
            maker.setOutputPath(outputPath);
            maker.setToolConfiguration(config);
            maker.setTemplatePath(this.getResourcePath() + File.separator + "other" + File.separator + "templates");
            System.out.println("正在生成工具");
            maker.generate();
            System.out.println("生成工具成功");
            System.out.println("输出项目目录为：" + outputPath);
            data.put("outputDir", outputPath);

            // 添加到数据库中
            IToolMakerService toolMakerService = getBean(IToolMakerService.class);
            ToolMakerEntity toolMakerEntity = new ToolMakerEntity();
            toolMakerEntity.setId(null);
            toolMakerEntity.setToolName(toolNameChinese);
            toolMakerEntity.setCreateTime(new Date());
            if(parentId!=null) {
                toolMakerEntity.setViewSource(parentId);
                toolMakerEntity.setParentToolName(parentToolName);
            } else {
                toolMakerEntity.setViewSource(0);
                toolMakerEntity.setParentToolName("");
            }
            toolMakerEntity.setIsDeploy(0);
            StringJoiner sj = new StringJoiner(",");
            fieldNames.forEach(sj::add);
            toolMakerEntity.setFields(sj.toString());
            toolMakerEntity.setToolDescription(toolDescription);
            sj = new StringJoiner(",");
            formulaNames.forEach(sj::add);
            toolMakerEntity.setFormulaFields(sj.toString());
            toolMakerEntity.setDataTableName(toolName);
            String userAccount = this.getUserAccount();
            toolMakerEntity.setToolOtherName(userAccount + "_" + toolName + "_" + System.currentTimeMillis()); // 默认设置为当前用户账号+_+工具名拼音
            toolMakerService.addTool(toolMakerEntity);

        } catch (Exception e) {
            e.printStackTrace();
            result.put("code", 500);

            result.put("message", this.getResourcePath() + "生成数据表失败" + e.getMessage() + e.getCause() + Arrays.toString(e.getStackTrace()));
            return result;
        }

        result.put("code", 200);
        result.put("data", data);
        return result;
    }

    // 生成数据表
    private DbTable generateTables(String tableName, List<String> fieldNames, List<String> fieldTypes) {
        DbTable dbTable = new DbTable();
        dbTable.setName(tableName);

        DbColumn id = new DbColumn();
        id.setType("NUMERIC");
        id.setComment("id");
        id.setName("id");
        id.setChangedName("id");

        List<DbColumn> dbColumns = new ArrayList<>(fieldNames.size());
        dbColumns.add(id);

        for (int i = 0; i < fieldNames.size(); i++) {
            DbColumn dbColumn = new DbColumn();
            if (fieldTypes == null || fieldTypes.size() < i + 1) {
                dbColumn.setType("varchar(255)");
            } else {
                dbColumn.setType(fieldTypes.get(i));
            }
            dbColumn.setComment(fieldNames.get(i));
            dbColumn.setName("column_" + i);
            dbColumn.setChangedName(ToolMakerUtil.underLineToCamelCase("column_" + i));
            dbColumns.add(dbColumn);
        }
        dbTable.setColumns(dbColumns);
        return dbTable;
    }

    @Action
    public void download(HttpServletRequest request, HttpServletResponse response) {
        String toolName = PinyinUtil.getPingYin(RequestUtils.getStringParameter(request, "toolName"));
        if (toolName == null || toolName.trim().isEmpty()) {
            System.out.println("工具名称为空");
            return;
        }
        File projectDir = new File(tempDir + File.separator + "toolmaker_" + toolName);
        if (!projectDir.exists()) {
            System.out.println("工具工程目录不存在");
            return;
        }
        try {
            Process process = Runtime.getRuntime().exec("python compile.py", null, projectDir);
            readProcessOutput(process);
            process.waitFor();

            File file = new File(projectDir.getPath() + File.separator + "tool.jar");
            InputStream ins = null;
            ins = new FileInputStream(file);

            /* 设置文件ContentType类型，这样设置，会自动判断下载文件类型 */
            response.setContentType("multipart/form-data");
            /* 设置文件头：最后一个参数是设置下载文件名 */
            response.setHeader("Content-Disposition", "attachment;filename=" + toolName + ".jar");
            OutputStream os = response.getOutputStream();
            byte[] b = new byte[1024];
            int len;
            while ((len = ins.read(b)) > 0) {
                os.write(b, 0, len);
            }
            os.flush();
            os.close();
            ins.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (InterruptedException e) {
            System.out.println("调用外部编译程序失败");
            e.printStackTrace();
        }
    }


    /**
     * 打印进程输出
     *
     * @param process 进程
     */
    private static void readProcessOutput(final Process process) {
        // 将进程的正常输出在 System.out 中打印，进程的错误输出在 System.err 中打印
        read(process.getInputStream(), System.out);
        read(process.getErrorStream(), System.err);
    }

    // 读取输入流
    private static void read(InputStream inputStream, PrintStream out) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));) {

            String line;
            while ((line = reader.readLine()) != null) {
                out.println(line);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {

            try {
                inputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    @Action
    public void downloadSource(HttpServletRequest request, HttpServletResponse response) {

        String toolName = PinyinUtil.getPingYin(RequestUtils.getStringParameter(request, "toolName"));
        if (toolName == null || toolName.trim().isEmpty()) {
            System.out.println("工具名称为空");
            return;
        }
        File projectDir = new File(tempDir + File.separator + "toolmaker_" + toolName);
        if (!projectDir.exists()) {
            System.out.println("工具工程目录不存在");
            return;
        }

        File toolZip = new File(projectDir, "tool.jar");
        if (toolZip.exists()) {
            toolZip.delete();
        }

        File srcZip = new File(projectDir, toolName + "-src.zip");
        if (srcZip.exists()) {
            srcZip.delete();
        }


        String outputFileName = toolName + "-src.zip";
        ZipUtil.zipFolder(projectDir.getAbsolutePath(), projectDir.getAbsolutePath(), outputFileName, "UTF-8", "templib");

        File file = new File(projectDir.getAbsolutePath() + File.separator + outputFileName);
        InputStream ins = null;
        try {
            ins = new FileInputStream(file);

            /* 设置文件ContentType类型，这样设置，会自动判断下载文件类型 */
            response.setContentType("multipart/form-data");
            /* 设置文件头：最后一个参数是设置下载文件名 */
            response.setHeader("Content-Disposition", "attachment;filename=" + file.getName());
            OutputStream os = response.getOutputStream();
            byte[] b = new byte[1024];
            int len;
            while ((len = ins.read(b)) > 0) {
                os.write(b, 0, len);
            }
            os.flush();
            os.close();
            ins.close();
            response.flushBuffer();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    @Action
    public void downloadSql(HttpServletRequest request, HttpServletResponse response) {
        String toolName = PinyinUtil.getPingYin(RequestUtils.getStringParameter(request, "toolName"));
        if (toolName == null || toolName.trim().isEmpty()) {
            System.out.println("工具名称为空");
            return;
        }
        File file = new File(tempDir + File.separator + "toolmaker_" + toolName + File.separator + "tempResources" + File.separator + toolName + ".sql");
        if (!file.exists()) {
            System.out.println("文件不存在");
            return;
        }

        try (OutputStream os = response.getOutputStream();) {
            InputStream ins = new FileInputStream(file);

            /* 设置文件ContentType类型，这样设置，会自动判断下载文件类型 */
            response.setContentType("multipart/form-data");
            /* 设置文件头：最后一个参数是设置下载文件名 */
            response.setHeader("Content-Disposition", "attachment;filename=" + file.getName());

            byte[] b = new byte[1024];
            int len;
            while ((len = ins.read(b)) > 0) {
                os.write(b, 0, len);
            }
            os.flush();
            os.close();
            ins.close();
            response.flushBuffer();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    @BeanDeclare(forClass = IToolMakerService.class, scope = BeanScope.TEMPORY)
    private IToolMakerService onDeclaringToolMakerService() {
        return new ToolMakerServiceImpl();
    }

    @BeanDeclare(forClass = IToolMakerDao.class, scope = BeanScope.TEMPORY)
    private IToolMakerDao onDeclaringToolMakerDao() throws Exception {
        return new ToolMakerDaoImpl();
    }
}
